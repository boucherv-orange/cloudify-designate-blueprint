tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - https://github.com/boucherv-orange/cloudify-openstack-plugin/raw/2.0-devel/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3/plugin.yaml

inputs:
  agent_user:
    description: User name used when SSH-ing into the started machine

  image_id:
    description: Openstack image name or id to use for the new server

  flavor_id:
    description: Openstack flavor name or id to use for the new server

  external_network_name:
    type: string
    description: Network that will be the floating IP

  network_name:
    description: Openstack network name the new server will be connected to
    default: net2

  key_pair_name:
    default: clearwater-key
    description: Openstack key pair name of the key to associate with the new server

  private_key_path:
    description: |
      Path to the private key which will be used for connecting to the server
      on the manager or machine running CLI if running in local mode.

  region:
    default: ''
    type: string

  central_region:
    default: ''
    type: string

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_input: region }

  central_openstack_config: &central_openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_input: central_region }

node_templates:

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: { get_input: key_pair_name }
      use_external_resource: true
      private_key_path: { get_input: private_key_path }

  desginate_port:
    type: cloudify.openstack.nodes.Port
    properties:
      use_external_resource: true
      openstack_config: *central_openstack_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              port_ip: { get_attribute: [ desginate_host, ip ] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: desginate_host
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: designate_floatingip


  desginate_host:
    type: cloudify.openstack.nodes.Server
    capabilities:
      scalable:
        properties:
          min_instances: 1
          max_instances: 1
    properties:
      cloudify_agent:
          user: { get_input: agent_user }
          key: { get_property: [ keypair, private_key_path ] }
      image: { get_input: image_id }
      flavor: { get_input: flavor_id }
      management_network_name: { get_input: network_name }
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.openstack.server_connected_to_security_group
        target: desginate_security_group
    interfaces:
      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

  desginate:
    type: cloudify.nodes.SoftwareComponent
    relationships:
      - type: cloudify.relationships.contained_in
        target: desginate_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create: scripts/install.sh

  desginate_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: desginate_sg
        description: DNS
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 53
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 53
        - remote_ip_prefix: 0.0.0.0/0
          port: 9001

  designate_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *central_openstack_config
      floatingip:
        floating_network_name: { get_input: external_network_name }

outputs:
  dns_endpoint:
    description: dns external endpoint
    value:
      - { get_attribute: [designate_floatingip, floating_ip_address] }
